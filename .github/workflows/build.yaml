name: Build App Installer

on:
  push:
    branches:
      - main # <-- تحديث هذا الفرع بالفرع الخاص بك
    tags:
      - 'v*' # <-- سيتم تشغيل العمل عند إنشاء علامة تبدأ بـ v

permissions:
  contents: write

jobs:
  windows-installer:
    runs-on: windows-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Get Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.3'
          channel: 'stable'

      - name: Install Dependencies
        run: flutter pub get

      - name: Build Windows App
        run: |
          flutter config --enable-windows-desktop
          flutter build windows --release

      - name: Get App Version
        id: app_version
        run: |
          $VERSION = (Get-Content pubspec.yaml | Select-String -Pattern "^version: (.+)\+").Matches.Groups[1].Value
          echo "VERSION=$VERSION" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "App version: $VERSION"

      - name: Create Installer with Inno Setup
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
        with:
          path: .github/workflows/installer.iss
          options: "/DAppVersion=${{ steps.app_version.outputs.VERSION }} /DAppName=Dev Server App /DAppExeName=dev_server.exe /DSourceDir=build/windows/x64/runner/Release /DOutputDir=releases/v${{ steps.app_version.outputs.VERSION }}"

      - name: Create Portable Version
        run: |
          $VERSION = "${{ steps.app_version.outputs.VERSION }}"
          $PORTABLE_DIR = "dev_server-v$VERSION-portable"
          New-Item -Path "$PORTABLE_DIR" -ItemType Directory -Force
          Copy-Item -Path "build/windows/x64/runner/Release/*" -Destination "$PORTABLE_DIR/" -Recurse
          Compress-Archive -Path $PORTABLE_DIR -DestinationPath "dev_server-v$VERSION-portable.zip"
          echo "Created portable version: dev_server-v$VERSION-portable.zip"

      - name: Release installer and portable version
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            ./releases/v${{ steps.app_version.outputs.VERSION }}/dev_server-v${{ steps.app_version.outputs.VERSION }}-setup.exe
            ./dev_server-v${{ steps.app_version.outputs.VERSION }}-portable.zip
          name: "v${{ steps.app_version.outputs.VERSION }}"
          draft: false
          prerelease: false

  macos-build:
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Get Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.3'
          channel: 'stable'

      - name: Install Dependencies
        run: flutter pub get

      - name: Build macOS App
        run: |
          flutter config --enable-macos-desktop
          flutter build macos --release

      - name: Create DMG
        run: |
          brew install create-dmg
          VERSION=$(grep 'version:' pubspec.yaml | awk '{print $2}' | cut -d'+' -f1)
          APP_NAME="Dev Server App"
          DMG_NAME="dev_server-v$VERSION.dmg"

          # Create DMG
          create-dmg \
            --volname "$APP_NAME" \
            --volicon "assets/images/logo.icns" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "$APP_NAME.app" 200 190 \
            --hide-extension "$APP_NAME.app" \
            --app-drop-link 600 185 \
            "$DMG_NAME" \
            "build/macos/Build/Products/Release/$APP_NAME.app"

      - name: Upload DMG to Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            ./*.dmg
          name: "v$VERSION"
          draft: false
          prerelease: false

  linux-build:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Get Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.3'
          channel: 'stable'

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
          flutter pub get

      - name: Build Linux App
        run: |
          flutter config --enable-linux-desktop
          flutter build linux --release

      - name: Create AppImage
        run: |
          sudo apt-get install -y fuse libfuse2
          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool

          VERSION=$(grep 'version:' pubspec.yaml | awk '{print $2}' | cut -d'+' -f1)
          APP_NAME="dev_server"

          # Create AppDir structure
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps

          # Copy application files
          cp -r build/linux/x64/release/bundle/* AppDir/usr/bin/
          cp assets/images/logo.png AppDir/usr/share/icons/hicolor/256x256/apps/$APP_NAME.png

          # Create desktop file
          cat > AppDir/usr/share/applications/$APP_NAME.desktop << EOF
          [Desktop Entry]
          Name=Dev Server App
          Exec=dev_server
          Icon=dev_server
          Type=Application
          Categories=Utility;
          EOF

          # Create AppRun file
          cat > AppDir/AppRun << EOF
          #!/bin/bash
          SELF=\$(readlink -f "\$0")
          HERE=\${SELF%/*}
          export PATH="\${HERE}/usr/bin:\${PATH}"
          export LD_LIBRARY_PATH="\${HERE}/usr/lib:\${LD_LIBRARY_PATH}"
          exec "\${HERE}/usr/bin/dev_server" "\$@"
          EOF

          chmod +x AppDir/AppRun

          # Create AppImage
          ./appimagetool AppDir "$APP_NAME-v$VERSION.AppImage"

      - name: Upload AppImage to Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            ./*.AppImage
          name: "v$VERSION"
          draft: false
          prerelease: false
